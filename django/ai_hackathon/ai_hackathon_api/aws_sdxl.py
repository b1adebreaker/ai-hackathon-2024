# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
Shows how to generate an image with SDXL 1.0 (on demand).
"""
import base64
import io
import json
import logging
import boto3
from PIL import Image

from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message

class SDXL():
    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)
    emotion_json = None

    def __init__(self, emotion_json):
        self.emotion_json = emotion_json

    def save_image(self, pdf_contents, pdf_name, report_year):
        pdf_filename = self.pdfs_company_dir + "/" + self.company_name + "_" + pdf_name
        pdf_filename = pdf_filename.replace(' ', '_')
        try:
            print("saving" + pdf_filename)
            company_obj = Company.objects.get(name=self.company_name)
            content_file_path = pdf_filename.replace('media/', '')
            print("content_file_path" + content_file_path)
            pdf_file = ContentFile(pdf_contents)
            pdf_file.name = content_file_path
            
            pdf = open(pdf_filename, 'wb')
            pdf.write(pdf_contents)
            pdf.close()

            tmp_report = CompanyReport(
                # Save the fields with the values from Visit
                company = company_obj,
                pdf = pdf_file,
                pdf_name = pdf_filename,
                year = report_year
            )
            tmp_report.save()

        except Exception as e:
            print("save_report_pdf: Exception caught ")
            print(e)

        print("pdf_filename saved " + pdf_filename)

    def generate_image(self, model_id, body):
        """
        Generate an image using SDXL 1.0 on demand.
        Args:
            model_id (str): The model ID to use.
            body (str) : The request body to use.
        Returns:
            image_bytes (bytes): The image generated by the model.
        """

        self.logger.info("Generating image with SDXL model %s", model_id)

        bedrock = boto3.client(service_name='bedrock-runtime')
    
        accept = "application/json"
        content_type = "application/json"

        response = bedrock.invoke_model(
            body=body, modelId=model_id, accept=accept, contentType=content_type
        )
        response_body = json.loads(response.get("body").read())
        print(response_body['result'])

        base64_image = response_body.get("artifacts")[0].get("base64")
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)

        finish_reason = response_body.get("artifacts")[0].get("finishReason")

        if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
            raise ImageError(f"Image generation error. Error code is {finish_reason}")

        self.logger.info("Successfully generated image withvthe SDXL 1.0 model %s", model_id)

        return image_bytes

    def main(self):
        """
        Entrypoint for SDXL example.
        """

        logging.basicConfig(level = logging.INFO,
                            format = "%(levelname)s: %(message)s")

        model_id='stability.stable-diffusion-xl-v1'

        # Create request body.
        body=json.dumps({
            "text_prompts": [
            {
            "text": json.dumps(self.emotion_json)
            }
        ],
        "cfg_scale": 10,
        "seed": 0,
        "steps": 50,
        "samples" : 1,
        "style_preset" : "photographic"

        })

        try:
            image_bytes=self.generate_image(model_id = model_id, body = body)
            image = Image.open(io.BytesIO(image_bytes))
            image.show()
        except ClientError as err:
            message=err.response["Error"]["Message"]
            self.logger.error("A client error occurred: %s", message)
            print("A client error occured: " +
                format(message))
        except ImageError as err:
            self.logger.error(err.message)
            print(err.message)
        else:
            print(f"Finished generating text with SDXL model {model_id}.")

if __name__ == "__main__":
    sdxl = SDXL()
    sdxl.main()
